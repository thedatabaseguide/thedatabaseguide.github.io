{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/04/29/my-first-blog/","title":"My First Blog","text":"<p>lorem ipsum</p>"},{"location":"books/docker-compose/","title":"Docker Compose","text":""},{"location":"books/docker-compose/#django-with-mysql","title":"<code>Django</code> with <code>MySql</code>","text":"<p>If you choose <code>Docker Compose</code> to deploy your Django web application along with a MySQL database, you would typically follow these steps:</p> <ul> <li><code>Dockerfile</code> for Django App:</li> </ul> <p>Here's a basic example of what a Dockerfile for a Django application might look like:</p> <p>```   FROM python:3.9</p> <p>WORKDIR /app</p> <p>COPY requirements.txt /app/   RUN pip install --no-cache-dir -r requirements.txt</p> <p>COPY . /app/</p> <p>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]   ```</p> <ul> <li><code>docker-compose.yml</code>:</li> </ul> <p>Below is an example <code>docker-compose.yml</code> file for a Django app with a MySQL database:</p> <p>```     version: '3'</p> <pre><code>services:\ndb:\n    image: mysql:5.7\n    restart: always\n    environment:\n    MYSQL_DATABASE: 'mydatabase'\n    MYSQL_USER: 'myuser'\n    MYSQL_PASSWORD: 'mypassword'\n    MYSQL_ROOT_PASSWORD: 'rootpassword'\n    ports:\n    - '3306:3306'\n\nweb:\n    build: .\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n    - .:/app\n    ports:\n    - '8000:8000'\n    depends_on:\n    - db\n</code></pre> <p>```</p> <ul> <li>Django <code>Settings</code>:</li> </ul> <p>Make sure your Django application's settings are configured to use the MySQL database. You'll need to update the <code>DATABASES</code> setting in your Django <code>settings.py</code> file to point to the MySQL database container</p> <ul> <li>Run <code>Docker Compose</code>:</li> </ul> <p>Run docker-compose up in the directory containing your docker-compose.yml file. This command will start the containers defined in the docker-compose.yml file. Docker Compose will build the Docker images (if necessary) and start the containers for your Django app and MySQL database.</p> <ul> <li><code>Access</code> Your Application:</li> </ul> <p>Once Docker Compose has started the containers, you should be able to access your Django application by navigating to <code>http://localhost:8000</code> in your web browser.</p>"},{"location":"books/jenkins-guide/","title":"Jenkins Guide","text":"<p>jenkins</p> <ol> <li> <p>Adding Restart Policies:</p> <p>You might want to add a restart policy to ensure that the Jenkins container automatically restarts if it crashes or if Docker restarts. This can be done using the <code>--restart</code> flag. For example, you could use <code>--restart</code> unless-stopped to ensure the container restarts unless explicitly stopped.</p> </li> <li> <p>Volume Mounts for Persistence:</p> <p>Jenkins typically stores its data in <code>/var/jenkins_home</code> directory within the container. If you want to persist Jenkins data between container restarts or updates, you can mount a volume from the host machine to this directory. This can be achieved using the <code>-v</code> flag. For example, <code>-v</code> <code>jenkins_home:/var/jenkins_home</code> would mount a volume named <code>jenkins_home</code> to the Jenkins home directory.</p> </li> </ol> <p>```bash title=\"bash\" docker run -d \\   -p 8080:8080 \\   -p 50000:50000 \\   --name jenkins \\   --restart unless-stopped \\   -v jenkins_home:/var/jenkins_home \\   -v /var/run/docker.sock:/var/run/docker.sock \\   jenkins/jenkins:lts</p> <pre><code>\nThis command ensures that the Jenkins container runs in detached mode, exposes ports `8080` and `50000`, has a restart policy set to \"unless stopped,\" mounts a volume named `jenkins_home` for data persistence, and uses the LTS version of the Jenkins image.\n\n&gt; Notes:\n\nThe `-v` flag in Docker is used to specify volume mounts. It allows you to create a persistent data volume outside the container and mount it into the container at a specified path.\n\nFor example, `-v` `/host/directory:/container/directory` would mount the directory `/host/`directory on the host machine into the directory `/container/directory` within the container.\n\nIn the context of running Jenkins, you typically want to persist Jenkins data, such as configuration, plugins, and job data, across container restarts. This is achieved by mounting a volume to the `/var/jenkins_home` directory within the Jenkins container.\n\nSo, when you use `-v` `jenkins_home:/var/jenkins_home`, Docker will create a volume named jenkins_home and mount it into the `/var/jenkins_home` directory in the container. This ensures that Jenkins data is stored outside the container and persists even if the container is removed or recreated.\n\nIn summary, when you see `-v` in a Docker command, it's indicating a volume mount, allowing you to persist data outside the container.\n\n---\n\n\n## Docker with Docker-in-Docker (DinD): \n\nIf you're running Jenkins within a Docker container, you can use Docker-in-Docker (DinD) to allow Jenkins to run Docker commands inside its own Docker containers. However, this approach has security implications and might not be recommended for production use without proper precautions.\n\n\n```bash title=\"bash\"\ndocker run -d \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -v jenkins_home:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  jenkins/jenkins:lts\n</code></pre> <p>If you want to include Docker-in-Docker (DinD) functionality in your Jenkins container setup, you'll need to bind the Docker socket (/var/run/docker.sock) from the host machine to the Jenkins container. This allows the Jenkins container to communicate with the Docker daemon running on the host machine.</p> <p>Here's the modified command to include the Docker socket binding:</p> <p>```bash title=\"bash\" docker run -d \\   -p 8080:8080 \\   -p 50000:50000 \\   --name jenkins \\   --restart unless-stopped \\   -v jenkins_home:/var/jenkins_home \\   -v /var/run/docker.sock:/var/run/docker.sock \\   jenkins/jenkins:lts</p> <pre><code>\nI've added `-v` `/var/run/docker.sock:/var/run/docker.sock` to the command, which binds the Docker socket from the host to the Jenkins container. This allows Jenkins to execute Docker commands inside the container.\n\nNow, with this setup, your Jenkins container will have access to Docker commands, allowing you to run Docker builds, start containers, and manage images as part of your Jenkins jobs or pipeline. Make sure to consider the security implications of allowing Jenkins to access the Docker daemon in this way.\n\n\n---\n\n{==\nSolving\n==}\n\nIf you want to pull Docker images within your Jenkins Dockerfile without adding the Docker installation steps, you can indeed simplify your Dockerfile. Here's how you can modify it to only pull Docker images:\n\n```bash title=\"bash\"\nFROM jenkins/jenkins:lts\n\nUSER root\n\n# Add Jenkins user to Docker group\nRUN usermod -aG docker jenkins\n\nUSER jenkins\n</code></pre> <p>With this Dockerfile, you're starting from the official Jenkins LTS image, switching to the root user to add the Jenkins user to the Docker group, and then switching back to the Jenkins user. This will allow Jenkins to pull Docker images without needing to install Docker within the Jenkins container itself.</p> <p>Remember that for this to work, you'll still need to mount the Docker socket from the host machine into the Jenkins container when you run the container. This will allow Jenkins to communicate with the Docker daemon running on the host and pull Docker images. Here's an example of how you can run the container with the Docker socket mounted:</p> <p><code>bash title=\"bash\" docker run -d \\   -v /var/run/docker.sock:/var/run/docker.sock \\   -p 8080:8080 \\   -p 50000:50000 \\   --name jenkins \\   your_custom_jenkins_image</code></p> <p>Replace <code>your_custom_jenkins_image</code> with the name of your custom Jenkins image built from the Dockerfile. With this setup, your Jenkins container will be able to pull Docker images using the Docker CLI on the host machine.</p>"},{"location":"books/jenkins-guide/#docker-images-types","title":"Docker Images Types","text":"<p>In Docker, an <code>image</code> is a lightweight, standalone, and executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and configuration files. When you run a Docker image, it creates a container, which is an instance of that image.</p> <p>Whether an image \"runs\" or not depends on what it's designed to do:</p> <ol> <li> <p>Runnable Images:</p> <p>These are images designed to start a process or service that runs continuously or performs some action until explicitly stopped. Examples include web servers, databases, or any other application that provides a service and needs to keep running.</p> </li> <li> <p>One-shot Images:</p> <p>Some images are designed to perform a specific task or action and then exit. These images are typically used for utilities, scripts, or diagnostic tools. They execute their task and then terminate. The <code>hello-world</code> image is an example of this. Other examples might include images for performing backups, data migrations, or other batch operations.</p> </li> </ol> <p>So, all images can be run, but the behavior of what they do when they're run can differ. Some images are meant to continuously run services, while others perform a task and then exit.</p> <p>Notes:</p> <p>Containers need a runnable image to exist. </p>"},{"location":"books/jenkins-guide/#types-of-containers-in-docker","title":"Types of Containers in Docker","text":"<ul> <li>Stateless Containers</li> <li>Stateful Containers</li> <li>Ephemeral Containers</li> </ul>"},{"location":"books/jenkins-guide/#dockerfile-application","title":"Dockerfile application","text":"<p>To create a simple HTML file with \"Hello, World!\" content and then build a Docker image containing this HTML file, you can follow these steps:</p> <ol> <li> <p>Create a simple HTML file named index.html with the \"Hello, World!\" content:</p> <p><code>html title=\"html\" &lt;!-- index.html --&gt; &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt;     &lt;meta charset=\"UTF-8\"&gt;     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;     &lt;title&gt;Hello, World!&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;h1&gt;Hello, World!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt;</code></p> </li> <li> <p>Create a <code>Dockerfile</code> in the same directory to build the Docker image:</p> <p>```</p> </li> <li> <p>Now, build the Docker image using the docker build command:</p> <p><code>sh title=\"bash\" docker build -t hello-world-html .</code></p> <p>This command builds a Docker image named <code>hello-world-html</code> using the Dockerfile in the current directory (<code>.</code>).</p> </li> <li> <p>Once the image is built, you can run a container from it:</p> <p><code>sh title=\"bash\" docker run -d -p 8080:80 --name hello-world-container hello-world-html</code></p> <p>This command runs a container from the <code>hello-world-html</code> image, maps port <code>8080</code> on the host to port 80 in the container (<code>-p 8080:80</code>), and gives the container a name (<code>--name hello-world-container</code>).</p> <p>Now, you can visit <code>http://localhost:8080</code> in your web browser to see the \"<code>Hello, World!</code>\" message served by the Docker container running the HTML file.</p> </li> </ol> <p>That's it! You've created a simple HTML file, built a Docker image containing it, and run a Docker container serving the HTML content.</p>"},{"location":"books/jenkins-guide/#dockerfile","title":"Dockerfile","text":"<p>FROM nginx:alpine COPY index.html /usr/share/nginx/html/index.html ```</p>"},{"location":"books/jenkins-guide/#pushing-images-to-dockerhub","title":"Pushing <code>images</code> to <code>Dockerhub</code>","text":"<p>To push your Docker image to Docker Hub (which is commonly referred to as Docker's public registry), you need to follow these steps:</p> <ul> <li> <p>Tag your image:</p> <p>Before pushing your image, you need to tag it with your Docker Hub username and the repository name. The format is <code>username/repository:tag</code>. If you haven't tagged your image yet, you can do it using the following command:</p> <p><code>sh title=\"bash\" docker tag hello-world-html yourusername/hello-world-html:latest</code></p> <p>Replace <code>hello-world-html</code> with the name of your local image, and <code>yourusername</code> with your Docker Hub username. You can choose any tag you want; <code>latest</code> is commonly used.</p> </li> <li> <p>Log in to Docker Hub:</p> <p>Use the docker login command to log in to your Docker Hub account.</p> <p><code>sh title=\"bash\" docker login</code></p> <p>Enter your Docker Hub username and password when prompted.</p> </li> <li> <p>Push your image:</p> <p>After logging in, you can push your image to Docker Hub using the docker push command:</p> <p><code>sh title=\"bash\" docker push yourusername/hello-world-html:latest</code></p> <p>Replace <code>yourusername/hello-world-html:latest</code> with the full name of your image, including the tag you used.</p> </li> <li> <p>Verify:</p> <p>Once the push is complete, you can go to your Docker Hub account in your web browser to verify that the image has been successfully pushed.</p> </li> </ul> <p>Your image is now available on Docker Hub and can be pulled by anyone with access to it. Remember that if you plan to share your image publicly, make sure not to include any sensitive information or credentials within the image.</p>"},{"location":"books/jenkins-guide/#reference","title":"Reference","text":"<ul> <li> <p>What is a Docker image?</p> </li> <li> <p>Different Types of Docker Containers</p> </li> <li> <p>Docker images</p> </li> </ul>"},{"location":"books/pocket-devops/","title":"Devops","text":""},{"location":"books/pocket-devops/#running-hello-world-in-docker","title":"Running Hello World in Docker","text":"<p>Problem</p> <p>You have access to a Docker host and want to run your first container. You want to learn the various life cycles of a container. As an example, you want to run a container and echo Hello World in it.</p> <p>Solution</p> <p>Typing docker at the prompt returns the usage of the docker command:</p> <p><code>$ docker</code></p> <p>Usage: <code>docker [OPTIONS] COMMAND [arg...]</code></p> <p>A self-sufficient runtime for linux containers.</p> <pre><code>Unable to find image 'busybox' locally\nbusybox:latest: The image you are pulling has been verified\n511136ea3c5a: Pull complete\ndf7546f9f060: Pull complete\ne433a6c5b276: Pull complete\ne72ac664f4f0: Pull complete\nStatus: Downloaded newer image for busybox:latest\nhello world\n</code></pre> <p>==Containers are based on images==. An image needs to be passed to the <code>docker run</code> command. In the preceding example, you specify an image called busybox. Docker does not have this image locally and pulls it from a public registry. A registry is a catalog of Docker images that the Docker client can communicate with and download images from. Once the image is pulled, Docker starts a container and executes the echo hello world command. Congratulations\u2014you ran your first container.</p>"},{"location":"books/pocket-devops/#knowing-the-difference-between-containers-and-virtual-machines","title":"Knowing the Difference Between Containers and Virtual Machines","text":"<p>In comparison, with <code>containers</code>, the ==sharing of the host OS\u2019s kernel== with the application means that the overhead of an additional OS is removed.</p>"},{"location":"books/pocket-devops/#dockerfile","title":"Dockerfile","text":"<p>A Dockerfile is a set of instructions that tells Docker how to build an image. A typical Dockerfile is made up of the following:</p> <ul> <li>A <code>FROM</code> instruction that tells Docker what the base image is</li> <li>An <code>ENV</code> instruction to pass an environment variable.</li> <li>A <code>RUN</code> instruction to run some shell commands (for example, install-dependent programs not available in the base image).</li> <li>A <code>CMD</code> or an <code>ENTRYPOINT</code> instruction that tells Docker which executable to run when a container is started.</li> </ul>"},{"location":"books/pocket-devops/#docker-image","title":"Docker Image","text":"<p><code>Docker image</code> is a ==read-only template== that forms the foundation of your application Docker images are created using a <code>series of commands</code>, known as instructions, in the <code>Dockerfile</code>. </p> <p>Breakdown of a <code>.Dockerfile</code></p> <ul> <li>A Docker image starts with a ==base image==, such as Ubuntu.</li> <li>On top of this image, we can add build our ==application stack== adding the packages as and when required.</li> </ul> <p>Notes:</p> <p>On the advanced scale, to keep the image size as low as possible, we can also start with slim packages, such as <code>Alpine</code> or even Scratch, which is Docker\u2019s reserved, minimal starting image for building other images.</p> <p>Every Docker image has an <code>associated tag</code>. Tags typically include <code>names</code> and <code>version labels</code>. While it is not mandatory to associate a version tag with a Docker image name, these tags make it easier to roll back to previous versions. Without a tag name, Docker must fetch the image with the latest tag. You can also provide a tag name to force-fetch a tagged image.</p>"},{"location":"books/pocket-devops/#docker-container","title":"Docker Container","text":"<p>A Docker image, when it\u2019s run in a host computer, spawns a process with its own namespace, known as a Docker container.</p> <p>The <code>main difference between</code> a Docker <code>image</code> and a <code>container</code> is the presence of a thin read/write layer known as the ==container layer==. Any changes to the filesystem of a container, such as writing new files or modifying existing files, are done to this writable container layer than the lower layers.</p> <p>==An important aspect to grasp== is that when a container is running, the changes are applied to the container layer and when the container is stopped/killed, the container layer is not saved. Hence, all changes are lost. </p> <p>This aspect of containers is not understood very well and for this reason, stateful applications and those requiring persistent data were initially not recommended as containerized applications. However, with <code>Docker Volumes</code>, there are ways to get around this limitation.</p>"},{"location":"books/pocket-devops/#bind-mounts-and-volumes","title":"Bind Mounts and Volumes","text":"<p>Docker provides different ways to mount data into a container from the Docker host: </p> <ul> <li>volumes,</li> <li>bind mounts, &amp; </li> <li>tmpfs volumes.</li> </ul> <p>While <code>tmpfs volumes</code> are stored in the host system\u2019s memory only, <code>bind mounts</code> and <code>volumes</code> are stored in the host filesystem</p>"},{"location":"books/pocket-devops/#docker-engine","title":"Docker Engine","text":"<p>Docker Engine is the core part of Docker. Docker Engine is a client-server application that provides the platform, the runtime, and the tooling for building and managing Docker images, Docker containers, and more. Docker Engine provides the following:</p> <ul> <li>Docker daemon</li> <li>Docker CLI</li> <li>Docker API</li> </ul>"},{"location":"books/pocket-devops/#docker-daemon","title":"Docker Daemon","text":"<p>The Docker daemon is a <code>service</code> that ==runs in the background of the host computer== and handles the heavy lifting of most of the Docker commands. The daemon listens for API requests for creating and managing Docker objects, such as <code>containers</code>, <code>networks</code>, and <code>volumes</code>.</p>"},{"location":"books/pocket-devops/#docker-cli","title":"Docker CLI","text":"<p>Docker CLI is the primary way that you will interact with Docker. Docker CLI exposes a set of commands that you can provide. The Docker CLI forwards the request to Docker daemon, which then performs the necessary work.</p> <p>While the Docker CLI includes a huge variety of commands and sub-commands, the most common commands that we will work with in this book are as mentioned:</p> <p>```bash title=\"bash\" $ docker build $ docker pull $ docker run $ docker exec</p> <pre><code>\n### Docker API\n\nDocker also provides an API for interacting with the Docker Engine. This is particularly useful if there\u2019s a need to create or manage containers from within applications. \n\n---\n\n## Docker Compose\n\nDocker Compose is a tool for defining and `running multi-container applications`. Much like how Docker allows you to build an image for your application and run it in your container, Compose use the same images in combination with a definition file (known as the compose file) to build, launch, and run multi-container applications, including dependent and linked containers.\n\nThe most common use case for Docker Compose is to run applications and their dependent services (such as databases and caching providers) in the same simple, streamlined manner as running a single container application.\n\n---\n\n## Volume\n\nDocker volumes are the current recommended method of persisting data stored in containers. Volumes are completely managed by Docker and have many advantages over bind mounts:\n\n\n### Docker Volume Subcommands\n\nDocker exposes the Volume API as a series of subcommands.\n\n```bash title=\"bash\"\n$ docker volume create\n\n$ docker volume inspect\n\n$ docker volume ls\n\n$ docker volume prune\n\n$ docker volume rm\n</code></pre>"},{"location":"books/pocket-devops/#hands-on-docker-commands","title":"Hands on Docker <code>Commands</code>","text":"<p>```bash title=\"bash\"</p>"},{"location":"books/pocket-devops/#make-sure-the-docke-in-installed","title":"Make sure the docke in installed","text":"<p>$ docker info</p>"},{"location":"books/pocket-devops/#working-with-docker-images","title":"Working with Docker Images","text":""},{"location":"books/pocket-devops/#listing-of-the-images-available-locally","title":"listing of the images available locally","text":"<p>$ docker image ls</p>"},{"location":"books/pocket-devops/#docker-inspect-command-provides-a-lot-of-information-about-the-image","title":"docker inspect command provides a lot of information about the image","text":"<p>$ docker image inspect hello-world</p>"},{"location":"books/pocket-devops/#of-importance-are-the-image-properties-env-cmd-and-layers","title":"Of importance are the image properties Env, Cmd, and Layers,","text":""},{"location":"books/pocket-devops/#which-tell-us-about-these-environment-variables","title":"which tell us about these environment variables.","text":""},{"location":"books/pocket-devops/#env","title":"Env","text":"<p>$ docker image inspect hello-world | jq .[].Config.Env</p>"},{"location":"books/pocket-devops/#startup-command-on-the-container","title":"startup command on the container","text":"<p>$ docker image inspect hello-world | jq .[].Config.Cmd</p>"},{"location":"books/pocket-devops/#layers-associated-with-the-image","title":"layers associated with the image","text":"<p>$ docker image inspect hello-world | jq .[].RootFS.Layers</p>"},{"location":"books/pocket-devops/#_1","title":"Pocker Devops","text":"<p>$ docker image inspect nginx | jq .[].Config.ExposedPorts ```</p>"},{"location":"books/tech-books/","title":"Technology Books","text":""},{"location":"books/tech-books/#self-help-books","title":"Self help books","text":"<p>Make life worthwhile </p>"},{"location":"books/tech-books/#reference","title":"Reference","text":"<ul> <li>Tech Books :github.com</li> <li>E-Books Directory</li> <li>FreeComputerBooks.com</li> </ul>"},{"location":"cryptography/intro/","title":"Intro","text":"<pre><code>Cryptography\n\u2502\n\u251c\u2500\u2500 Symmetric Key Cryptography\n\u2502   \u251c\u2500\u2500 AES\n\u2502   \u251c\u2500\u2500 DES\n\u2502   \u2514\u2500\u2500 3DES\n\u2502\n\u251c\u2500\u2500 Asymmetric Key Cryptography\n\u2502   \u251c\u2500\u2500 RSA\n\u2502   \u251c\u2500\u2500 ECC\n\u2502   \u2514\u2500\u2500 ElGamal\n\u2502\n\u251c\u2500\u2500 Hash Functions\n\u2502   \u251c\u2500\u2500 SHA-256\n\u2502   \u251c\u2500\u2500 MD5\n\u2502   \u2514\u2500\u2500 SHA-3\n\u2502\n\u251c\u2500\u2500 Digital Signatures\n\u2502   \u251c\u2500\u2500 RSA Digital Signatures\n\u2502   \u2514\u2500\u2500 ECDSA\n\u2502\n\u251c\u2500\u2500 Cryptographic Protocols\n\u2502   \u251c\u2500\u2500 TLS/SSL\n\u2502   \u2514\u2500\u2500 IPsec\n\u2502\n\u2514\u2500\u2500 Public Key Infrastructure (PKI)\n    \u251c\u2500\u2500 Certificate Authorities (CAs)\n    \u251c\u2500\u2500 Registration Authorities (RAs)\n    \u2514\u2500\u2500 X.509 Certificates\n</code></pre> <p>???+ tip \"Explain to 5 year old, what is Symmetric and Asymmetric Key Cryptography \"</p> <pre><code>Alright, let's imagine a simple way to understand symmetric and asymmetric key cryptography using a fun analogy:\n\n**Symmetric Key Cryptography: The Secret Code**\n\nImagine you have a special box that can only be opened with a secret key.\n\n-   Symmetric Key: You and your friend both have the same secret key to open the box. This key is like a special code that only you two know.\n-   How it Works:\n    -   Locking the Box: You put a toy inside the box and lock it with the key.\n    -   Unlocking the Box: Your friend uses the same key to open the box and see the toy inside.\n\nSo, both of you need the same key to lock and unlock the box. If someone else finds the box but doesn\u2019t have the key, they can\u2019t open it.\n\n\n**Asymmetric Key Cryptography: The Magic Lock**\n\nNow, imagine you have a magic lock with two keys \u2013 one to lock and another to unlock.\n\n-   Asymmetric Keys:\n    -   Public Key: This key is like a special lock you can give to everyone. Anyone can use it to lock the box.\n    -   Private Key: This is the special key you keep secret. Only you can use this key to unlock the box.\n\n-   How it Works:\n    -   Locking the Box: Anyone who has the public key can lock the box, but they can\u2019t open it.\n    -   Unlocking the Box: Only you, with the private key, can unlock the box and see what\u2019s inside.\n\nSo, people can send you secret things by locking them with the public key, and only you can unlock them with your private key.\n\n\n---\n\n\n**Summary**\n\n-   **Symmetric Key**: Same key for locking and unlocking (like a shared secret code).\n-   **Asymmetric Key**: Different keys for locking and unlocking (like a magic lock with one key that everyone can use to lock, and a special key that only you can use to unlock).\n\nThis way, both types of keys help keep your secrets safe, but they work in different ways!\n</code></pre>"},{"location":"cryptography/intro/#reference","title":"Reference","text":"<ul> <li>Cryptography and its Types</li> </ul>"},{"location":"cryptography/steganography/","title":"Steganograpgy","text":"<p>Steganography is the practice of concealing information within other non-secret text or data, such that the presence of the hidden message is not obvious. Unlike encryption, which makes data unreadable to unauthorized users, steganography aims to hide the fact that communication is occurring at all.</p> <p>???+ info \"Key Aspects of Steganography\"</p> <pre><code>1.  **Purpose**: The main goal is to hide information rather than just securing it. This can be useful for covert communication or watermarking.\n\n2.  **Techniques**:\n\n    -   Image Steganography: Hides data within the pixels of an image. For instance, the least significant bits (LSBs) of pixel values can be altered to encode hidden information.\n    -   Audio Steganography: Conceals data within audio files by manipulating certain audio properties or embedding data in inaudible frequencies.\n    -   Text Steganography: Involves embedding hidden messages within text by using techniques such as altering word spacing, changing fonts, or using specific letter patterns.\n    -   Video Steganography: Embeds information in video files, exploiting both spatial and temporal redundancies.\n    -   Network Steganography: Conceals data within network protocols or traffic patterns.\n</code></pre>"},{"location":"cryptography/steganography/#tools","title":"Tools","text":"<p>=== \"Image\"</p> <pre><code>`Image Steganography Tools`\n\n**OpenStego**\n\n-   Features: Provides basic steganography functionality for embedding data in images. Supports PNG and BMP formats.\n-   Website: [OpenStego](#)\n\n\n**Steghide**\n\n-   Features: A command-line tool that supports embedding data in various file formats, including JPEG, BMP, WAV, and AU.\n-   Website: [Steghide](#)\n</code></pre> <p>=== \"Audio\"</p> <pre><code>`Audio Steganography Tools`\n\n**DeepSound**\n\n-   Features: Allows embedding hidden messages or files within audio files (WAV, MP3, etc.). Includes encryption options.\n-   Website: [DeepSound](#)\n\n**Hide &amp; Seek**\n\n-   Features: Provides a straightforward interface for embedding hidden data in audio files using LSB (Least Significant Bit) encoding.\n-   Website: [Hide &amp; Seek](#)\n</code></pre> <p>=== \"Video\"</p> <pre><code>`Video Steganography Tools`\n\n**StegoVideo**\n\n-   Features: Enables hiding data within video files by modifying frames or audio tracks. Offers encryption and data management options.\n-   Website: [StegoVideo](#)\n\n**Camouflage**\n\n-   Features: Focuses on hiding data within video files using various techniques and includes built-in encryption.\n-   Website: [Camouflage](#)\n</code></pre> <p>=== \"Text\"</p> <pre><code>`Text Steganography Tools`\n\n**Covert**\n\n-   Features: A tool for hiding text within other text by using various techniques like text formatting and word spacing.\n-   Website: [Covert](#)\n\n**Text Steganography Tool**\n\n-   Features: Simple tool for embedding text messages into other text files.\n-   Website: [Text Steganography Tool](#)\n</code></pre> <p>=== \"General-purpose\"</p> <pre><code>`General-purpose Steganography Tools`\n\n**StegExpose**\n\n-   Features: A command-line tool used for detecting steganography in images. Useful for analyzing and identifying hidden data.\n-   Website: StegExpose\n\n**Xiao Steganography**\n\n-   Features: Supports hiding files in images and offers a user-friendly interface. Also includes options for text steganography.\n-   Website: Xiao Steganography\n</code></pre>"},{"location":"cryptography/steganography/#online-tools","title":"Online Tools","text":"<p>Steganography Online</p> <ul> <li>Features: Allows users to embed and extract hidden data from images directly through a web interface.</li> <li>Website: Steganography Online</li> </ul> <p>Lsb-Steganography</p> <ul> <li>Features: An online tool for hiding and extracting data from images using LSB encoding.</li> <li>Website: LSB-Steganography</li> </ul> <p>???+ info \"Choosing the Right Tool\"</p> <pre><code>When selecting a steganography tool, consider the following:\n\n-   **Type of Media**: Choose a tool that supports the type of media you are working with (images, audio, video, text).\n-   **Ease of Use**: Some tools are more user-friendly with graphical interfaces, while others may require command-line knowledge.\n-   **Encryption**: For added security, select tools that offer encryption features.\n-   **Detection and Analysis**: Tools for detecting steganography can be useful if you need to identify hidden data within media files.\n</code></pre> <p>These tools cater to different needs and levels of expertise, from simple, user-friendly applications to more complex command-line utilities.</p>"},{"location":"database/intro/","title":"Intro","text":"<p>asdad</p>"},{"location":"database/firebase/intro/","title":"Intro","text":"<p>firebase</p>"},{"location":"database/mongodb/intro/","title":"Intro","text":"<p>mongodb</p>"},{"location":"database/mysql/intro/","title":"Intro","text":"<p>mysql</p>"},{"location":"database/postgresql/intro/","title":"Intro","text":"<p>postgresql</p>"},{"location":"linux/debian/","title":"Intro","text":"<p>What is a daemon?</p> <p>A daemon (pronounced <code>DAY-MAN</code>, <code>DAY-MON</code> or sometimes <code>DEE-MON</code>) is a background process that runs on the Linux OS continuously. When we say background, we mean that the program runs without any user interaction. It runs \u201cbehind the scenes\u201c so to speak.</p>"},{"location":"linux/debian/#basic","title":"Basic","text":"<ul> <li> <p>To see which <code>kernel version</code> is running on your system:</p> <p>==The command \u201c<code>uname</code>\u201d stands for \u201cUnix name\u201d and tells you about the operating system kernel that\u2019s running.==</p> <p>```bash</p> </li> <li> <p>To Open New Terminal in Ubuntu:</p> <p>++ctrl+alt+t++</p> </li> </ul>"},{"location":"linux/debian/#display-the-operating-system-kernel-thats-running","title":"display the operating system kernel that\u2019s running:","text":"<p>$ uname</p>"},{"location":"linux/debian/#display-the-kernel-version-number-the-release","title":"display the kernel version number (the \u201crelease\u201d):","text":"<p>$ uname -r</p>"},{"location":"linux/debian/#display-the-machine-hardware-name","title":"display the machine hardware name:","text":"<p>$ uname -m</p>"},{"location":"linux/debian/#display-all-available-information","title":"display all available information:","text":"<p>$ uname -a ```</p>"},{"location":"linux/debian/#white-belt","title":"White belt","text":"<ul> <li> <p>To see the hostname:</p> <p>```bash $ hostname</p> </li> <li> <p>To see your assigned <code>user id</code> and <code>group id</code>, simply issue the <code>id</code> command:</p> <p><code>bash $ id</code></p> </li> </ul>"},{"location":"linux/debian/#pwd-or-print-working-directory","title":"pwd or Print Working Directory","text":"<p>$ pwd ```</p>"},{"location":"linux/debian/#black-belt","title":"Black Belt","text":"<ul> <li> <p><code>Tmux</code>: Secret Background Windows</p> <p><code>tmux</code> or <code>Terminal Multiplexer</code> is a piece of software used to manage terminal sessions. In addition, it can spin up long-standing terminals in the background of the Linux operating system that can be saved and recalled later.</p> <p>Tmux cancaome in handy for when you are doing work on a Linux system remotely via ==SSH== and need to keep a session open and to come back to later.</p> <p>```bash title=\"bash\"</p> </li> </ul>"},{"location":"linux/debian/#install","title":"install","text":"<p>$ apt-get install tmux ```</p>"},{"location":"linux/debian/#cat-commands","title":"Cat Commands","text":"<p>Cat means <code>concatenate</code> frequently used command in Linux. It can read data from the file and gives the content as output. It can help us to <code>create</code>, <code>view</code> and <code>concatenate</code> files. </p> <p>So let us see frequently used <code>cat</code> commands.</p> <pre><code># TO VIEW A SINGLE FILE:\n$ cat filename\n\n# TO VIEW MULTIPLE FILES\n$ cat filename1 filename2\n\n# TO VIEW THE CONTENTS OF A FILE PRECEDING WITH LINE NUMBERS:\n$ cat -n filename\n\n# TO CREATE A FILE\n$ cat &gt; new_file\n</code></pre> <p>Ubuntu Important Commands</p> <pre><code># It gives information about how long the system has been running in one line.\n$ uptime\n\n# It displays detailed information about the users who are logged in the system currently.\n$ w\n\n# Using DNS Tools\n# 1. It display information about the domain name, IP address &amp; DNS server\n$ nslookup www.google.com\n\n# 2. It display information about the domain name &amp; IP Addresss\n$ host www.google.com\n\n# 3. dig is a more advanced DNS tool\n$ dig www.google.com\n</code></pre>"},{"location":"linux/debian/#types-of-packages","title":"Types of Packages","text":"<p>The two most popular packages</p> <ol> <li> <p>Debian (<code>.deb</code>) packages:</p> <p>Debian packages are used for distributions like Debian, Ubuntu, and Linux Mint. </p> </li> <li> <p>Red Hat (<code>.rpm</code>):</p> <p>Red Hat packages are used in Fedora, CentOS, RHEL, Suse, and others.</p> </li> </ol>"},{"location":"linux/debian/#package-manager","title":"Package Manager","text":"<ol> <li> <p>Debian package tool (dpkg): DPKG - The True Hero</p> <p><code>Dpkg</code> is a tool that APT is using behind the scenes to install packages. <code>Dpkg</code> ==doesn\u2019t install dependencies==. If we have a <code>.deb</code> package on our system, we can install it easily with dpkg:</p> <p>```bash</p> </li> <li> <p>apt-get</p> <p>```bash</p>"},{"location":"linux/debian/#install_1","title":"install","text":"<p>$ dpkg -i my_package_to_be_installed.deb</p>"},{"location":"linux/debian/#remove","title":"remove","text":"<p>$ dpkg -r my_package_to_be_removed.deb</p>"},{"location":"linux/debian/#list","title":"list","text":"<p>$ dpkg -l ```</p>"},{"location":"linux/debian/#syntax","title":"syntax","text":"<p>$ apt-get install  <p>$ apt-get install nmap ```</p> <li> <p>Advanced Package Tool (apt)</p> <p><code>apt</code> was introduced to be a bit more user-friendly than <code>apt-get</code>. APT builds on dpkg and adds some special features like managing dependencies, upgrades and searching for package</p> <p>```bash</p> </li> <li> <p>Snap (.snap)</p> <p>Snap, a <code>package management system</code> developed by ==Canonical, Ltd==. Unlike <code>apt</code> packages, <code>snap</code> bundles all of the dependencies for a package into a single <code>.snap</code> file.  </p> <p>This ensures that the software package is self-contained with its own copy of all of the libraries and assets needed to run. This avoids the potential conflicts of packages relying on different versions of the same shared assets and libraries. The Snap system also allows different versions of the same packages to be installed in parallel.</p> <p>```bash</p> </li>"},{"location":"linux/debian/#keeping-software-up-to-date","title":"Keeping Software Up to Date","text":"<p>$ sudo apt update ```</p>"},{"location":"linux/debian/#basic-snap-commands","title":"Basic Snap Commands","text":"<p>$ snap list $ snap install remmina $ snap remove remmina $ snap find vlc $ snap info remmina ```</p>"},{"location":"linux/debian/#tar-tape-archive","title":"Tar (==Tape Archive==)","text":"<p>Tar is a powerful archiving utility used to compress and backup files in the Linux operating system. It is popular tool for creating <code>archives</code> of files and directories.</p> <pre><code># To create a tar archive\n$ tar -cvf archive.tar directory/\n\n# To view the contents of a tar archive\n$ tar -tvf archive.tar\n\n# To extract the contents of a tar archive\n$ tar -xvf archive.tar\n</code></pre> <ul> <li>\u2018<code>c</code>\u2019 flag stands for <code>create</code></li> <li>\u2018<code>x</code>\u2019 flag stands for <code>extract</code></li> <li>\u2018<code>t</code>\u2019 flag stands for <code>list</code></li> <li>\u2018<code>v</code>\u2019 stands for <code>verbose</code></li> <li>\u2018<code>f</code>\u2019 stands for <code>file</code></li> </ul>"},{"location":"linux/debian/#file-permissions-and-ownership","title":"File Permissions and Ownership","text":"<p>In Linux, every file and directory has an owner and a set of permissions that determine who can access and modify the file.</p> <p>File Permissions</p> <p>Each file on a Linux system has <code>three</code> types of permissions:</p> <ul> <li>read <code>r</code>, </li> <li>write <code>w</code>, </li> <li>execute <code>x</code></li> </ul> <p>```bash title=\"bash\" $ ls -l  <pre><code>\n**Changing File Permissions**\n\nThe `chmod` command is used to change the permissions for a file. \n\n```bash title=\"bash\"\n$ chmod mode &lt;file-or-folder&gt;\n</code></pre> <p>There are two ways to specify the mode: </p> <ul> <li>using a <code>numeric value</code>, or </li> <li>using <code>symbolic values</code>.</li> </ul>"},{"location":"linux/debian/#groups-and-id","title":"Groups and id","text":"<ol> <li> <p>Creating a Group:</p> <p>To create a group, you can use the <code>groupadd</code> command followed by the name of the group you want to create. For example:</p> <p><code>bash title=\"bash\" $ sudo groupadd developers</code></p> <p>This creates a new group called <code>developers</code>.</p> </li> <li> <p>Adding <code>Users</code> to a <code>Group</code>:</p> <p>To add users to a group, you can use the <code>usermod</code> command with the <code>-aG</code> option followed by the group name and username. For example:</p> <ul> <li> <p><code>-a</code>, <code>--append</code>: </p> <p>This option tells <code>usermod</code> to append the user to the supplementary group(s). In other words, it adds the user to the specified group(s) without removing the user from any other groups.</p> </li> <li> <p><code>-G</code>, <code>--groups</code>:</p> <p>This option specifies a list of supplementary groups which the user should become a member of. This option sets the list of supplementary groups directly, without appending to the current list of supplementary groups.</p> </li> </ul> <p>So, when you use <code>-aG</code> together with usermod, it means you are appending the user to the specified group(s) without removing the user from any other groups, and you're specifying a list of supplementary groups which the user should become a member of.</p> <p><code>bash title=\"bash\" $ sudo usermod -aG developers alice</code></p> <p>This adds the user <code>alice</code> to the <code>developers</code> group.</p> </li> <li> <p>Checking Group Membership:</p> <p>To see which <code>groups</code> a <code>user</code> belongs to, you can use the <code>id</code> command followed by the username. For example:</p> <p><code>bash title=\"bash\" $ id alice</code></p> </li> </ol>"},{"location":"linux/debian/#to-list-all-groups","title":"To List all groups","text":"<p>To list all the groups in Linux, you can use the <code>getent</code> command followed by the <code>group</code> argument:</p> <p>```bash title=\"bash\" $ getent group</p>"},{"location":"linux/debian/#to-check-if-the-docker-group-already-exists-on-your-system","title":"To check if the \"docker\" group already exists on your system,","text":""},{"location":"linux/debian/#if-the-group-doesnt-exist-this-command-will-not-produce-any-output","title":"If the group doesn't exist, this command will not produce any output.","text":"<p>$ getent group docker</p>"},{"location":"linux/debian/#this-command-will-display-all-the-groups-that-the-user-bishow-is-a-member-of","title":"This command will display all the groups that the user \"bishow\" is a member of.","text":"<p>$ groups bishow</p> <pre><code>\nAlternatively, you can also view the contents of the `/etc/group` file, which stores group information. You can use any text editor or commands like `cat` or `less` to view its contents:\n\n```bash title=\"bash\"\n$ cat /etc/group\n\n#\n$ grep docker /etc/group\n</code></pre> <p>Notes:</p> <p>Choose whichever method is more convenient for you.</p> <p>Issue Solved:</p> <p>==permission denied while trying to connect to the Docker daemon socket at <code>unix:///var/run/docker.sock</code>==</p> <ol> <li> <p>Check Docker Socket Permissions:</p> <p>Ensure that the Docker socket file (<code>/var/run/docker.sock</code>) has appropriate permissions for the \"docker\" group to read and write to it. You can check and adjust the permissions using the following commands:</p> <p><code>bash title=\"bash\" ls -l /var/run/docker.sock sudo chmod 666 /var/run/docker.sock</code></p> <p>The first command (<code>ls -l /var/run/docker.sock</code>) shows the current permissions, and the second command (<code>sudo chmod 666 /var/run/docker.sock</code>) grants read and write permissions to all users and groups.</p> </li> <li> <p>Restart Docker Service:</p> <p>Restart the Docker service to apply any changes to group memberships or permissions:</p> <p><code>bash title=\"bash\" sudo systemctl restart docker</code></p> </li> <li> <p>Logout and Log Back In:</p> <p>If the above steps don't resolve the issue, try logging out and logging back in to refresh your session and apply any group membership changes:</p> <p><code>bash title=\"bash\" logout</code></p> <p>Then log back in and try running <code>docker ps</code> again.</p> </li> </ol> <p>After performing these steps, try running <code>docker ps</code> again without sudo to check if the permission issue has been resolved. If you continue to encounter permission denied errors, further troubleshooting may be needed.</p>"},{"location":"linux/debian/#symlink-linux","title":"Symlink <code>Linux</code>","text":"<p>A symlink (also called a <code>symbolic link</code>) is a type of file in Linux that points to another file or a folder on your computer. Symlinks are similar to shortcuts in Windows.</p> <pre><code># Create a symlink to Director/Folder\n$ ln -s /home/user/Folder &lt;symlink-dir&gt;\n\n# Unlink or Remove a symlink\n$ unlink &lt;path-to-symlink&gt;\n$ rm &lt;path-to-symlink&gt;\n\n# Find and Delete Broken Links\n$ find /home/james -xtype l\n$ find /home/james -xtype l -delete\n\n# Check file/folder is symlink\n$ ls -l &lt;path-to-assumed-symlink&gt;\n\n# SOLVED: sysmlink error\n# 1. Check the File/Folder is sysmlink corrupt or not\n# $ ls -l &lt;file/folder&gt;\n#\n# 2. Unlink the Filer/Folder\n# $ unlink &lt;file/folder&gt;\n#\n# 3. Create a File/Folder\n# $ mkdir Documents\n</code></pre> <p>Reference</p> <ul> <li>How to Create Linux Symlinks</li> <li>Symlink Tutorial in Linux</li> </ul> <p></p> <p>!!! question \"Linux\"</p> <p>!!! example \"Pass (<code>ubuntu</code>)\"</p> <pre><code>pass is a very simple password store that keeps passwords inside `gpg`. It stores, retrieves, generates, and synchronizes passwords securely.\n\n```bash title=\"bash\"\n$ sudo apt update\n$ sudo apt install pass\n```\n</code></pre> <p>??? example \"<code>service</code> vs <code>systemctl</code>\" </p> <pre><code>The commands sudo `service` and `systemctl` are both used for managing system services in Unix-like operating systems, but they have different purposes and usage patterns.\n\n1. **sudo service**:\n\n      `sudo service` is a command-line tool used for managing services on Unix-like systems, ==particularly those using **SysVinit** as the init     system==. It provides a simple and consistent interface for starting, stopping, restarting, and querying the status of services.\n\n      Usage:\n\n      ```bash title=\"bash\"\n      # syntax\n      $ sudo service &lt;service_name&gt; &lt;action&gt;\n\n      #example\n      $ sudo systemctl restart apache2\n      ```\n\n      The service command is often used in older Linux distributions that still use SysVinit as the init system.\n\n2. **systemctl**:\n\n      `systemctl` is a command-line tool used for controlling the systemd system and service manager. ==`Systemd` is a modern init system== used by many     Linux distributions. systemctl allows you to manage services, units, targets, sockets, and more.\n\n      Usage:\n\n      ```bash title=\"bash\"\n      $ sudo systemctl &lt;action&gt; &lt;service_name&gt;\n      $ sudo systemctl restart apache2\n      ```\n\n      `systemctl` provides more features and capabilities compared to `service`, and it's the preferred method for managing services on systems that use     systemd.\n\nIn summary, if your system is using SysVinit as the init system, you would typically use `sudo service` to manage services. If your system is using systemd, `systemctl` is the preferred tool for service management. However, some distributions may provide compatibility layers or aliases to ensure compatibility between the two commands.\n</code></pre> <p>??? example \"Creating a <code>User</code> ==without password==\"</p> <pre><code>Yes, you can add the `jenkins` user without setting a password. This is often done for system users that don't require interactive login, such as the     `jenkins` user used for automation tasks.\n\nTo add the `jenkins` user without setting a password, you can use the useradd command with the `-r` (or `--system`) option, which creates a system user     without a password or home directory. Here's the command:\n\n```sh title=\"bash\"\nsudo useradd -r jenkins\n```\n\nThis command creates the `jenkins` user as a system user. ==System users are typically used for services and daemons and do not have passwords or home     directories by default==.\n\nAfter adding the user, you can proceed to grant the necessary permissions to the `jenkins` user, such as adding it to the 'docker' group if needed, to allow it to perform specific tasks without requiring a password.\n</code></pre> <p>??? example \"groups &amp; id in unix\"</p> <pre><code>To see the permissions of a user on a Unix-like system, you can use the `groups` command or `id` command.\n\n```bash title=\"bash\"\n# Syntax\n$ groups &lt;username&gt;\n$ id &lt;username&gt;\n\n# Example: ($USER refer to the currently logged-in user.)\n$ groups $USER\n```\n</code></pre> <p>??? example \"Installing Xampp in Linux\"</p> <pre><code>  ```sh\n  # To Launch XAMPP\n  sudo /opt/lampp/./manager-linux-x64.run\n\n  # To Unistall\n  sudo /opt/lampp/./uninstall\n\n\n  # After uninstall, remove the directory\n  sudo rm -r /opt/lamp\n  ```\n\n  `sudo visudo` is a command used in Linux to edit the sudoers file, which determines who has administrative privileges on the system and what commands they can run with elevated permissions using the `sudo` command. The ==sudoers== file is crucial for system security, as it controls access to sensitive operations.\n\n  Here's what each part of the command does:\n\n  - `sudo`:\n\n        This is a command used in Unix-like operating systems to allow users to run programs with the security privileges of another user (usually the `superuser`, or \"`root`\"). It stands for \"superuser do.\"\n\n  - `visudo`:\n\n        This is a command-line utility specifically designed for editing the ==sudoers file==. It opens the sudoers file in a text editor, but it performs some syntax checking before saving changes to ensure that the file remains in a valid state. This helps prevent accidental misconfigurations that could lock users out of administrative access or potentially compromise system security.\n\n  In summary, `sudo visudo` is used to safely edit the sudoers file, which is critical for managing user privileges and access control on a Linux system.\n\n  - [How to Install and Use XAMPP on Ubuntu](https://itsfoss.com/install-xampp-ubuntu/)\n</code></pre>"},{"location":"linux/debian/#reference","title":"Reference","text":"<ul> <li>Shell Samurai by Stetson Blake</li> <li>Linux Mastery: 100+ Exercises for Building Your Skills by Frank Anemaet</li> </ul> <p>Blog</p> <ul> <li>Install Docker Engine on Ubuntu 22.04</li> </ul> <p>Icebere Model</p> <ul> <li>a systems thinking model: the iceberg</li> <li>Iceberg Model</li> </ul>"},{"location":"university/intro/","title":"Intro","text":"<p>quillbot.com/</p>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}